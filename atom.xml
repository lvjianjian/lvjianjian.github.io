<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lv~jianjian&#39;s blog</title>
  <subtitle>所爱隔山海,山海皆可平</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-02T14:00:33.374Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhongjian Lv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java内存模型</title>
    <link href="http://yoursite.com/2018/05/02/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/05/02/Java内存模型/</id>
    <published>2018-05-02T13:43:18.000Z</published>
    <updated>2018-05-02T14:00:33.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h1><p>###1. 运行时数据区<br>JVM虚拟机管理的内存会在执行时被划分为以下几个区域,总体的内存模型如下：<br><img src="/2018/05/02/Java内存模型/mem_model.png" alt=""><br>其中方法区和Java堆是所有线程共享的，而JVM栈、本地方法栈、程序计数器是线程私有的。</p>
<ul>
<li><p>程序计数器</p>
<ul>
<li>一块较小的内存, 可以看成是当前线程所执行的字节码的行号指示器，目的是为了引导字节码解析的顺序（字节码解释器通过改变这个计数器的值来选取下一条要执行的字节码指令）。<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<h1 id="如果线程执行一个Java方法，则程序计数器存放虚拟机字节码指令的地址，如果执行一个Native放法，则为空。"><a href="#如果线程执行一个Java方法，则程序计数器存放虚拟机字节码指令的地址，如果执行一个Native放法，则为空。" class="headerlink" title="* 如果线程执行一个Java方法，则程序计数器存放虚拟机字节码指令的地址，如果执行一个Native放法，则为空。"></a>* 如果线程执行一个Java方法，则程序计数器存放虚拟机字节码指令的地址，如果执行一个Native放法，则为空。</h1><ul>
<li>如果线程执行一个Java方法，则程序计数器存放虚拟机字节码指令的地址，如果执行一个Native放法，则为空。<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>0074edf937428890e79e0ba2d110299c92bd42bd</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</li>
<li>唯一一个没有规定任何OutOfMemoryError情况的区域。</li>
</ul>
</li>
</ul>
</li>
<li><p>JVM栈</p>
<ul>
<li><p>Java方法执行时的内存模型,每一个方法执行的同时会创建一个栈帧（Stack Frame），用于存放局部变量表，操作数栈，动态链接，放法出口等信息。每一个方法的执行对应着栈帧在JVM栈中的入栈、出栈过程。</p>
<ul>
<li>局部变量表:存放编译期可知的各种基本类型、对象引用类型和returnAddress类型（指向一条字节码指令的地址，即函数返回地址）。局部变量表所需内存在编译期确定，进入一个方法时，方法在栈帧中所分配的局部变量是完全确定的，不可动态改变大小。32位数据占用一个slot, 64位数据占用两个slot（long，double）,引用类型可能占一个也可能占两个。</li>
<li>操作数栈：最大深度由编译期确定。用于存放JVM从局部变量表复制的常量或者变量，提供提取，及结果入栈，也用于存放调用方法需要的参数及接受方法返回的结果。</li>
<li>动态链接：每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。</li>
<li>方法返回地址：当执行引擎遇到任意一个方法返回的字节码指令或者未在方法内处理的异常时会退出该方法。退出时需要返回到方法被调用的位置。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。（一般来说，方法正常退出时，调用者的PC计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值; 方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息）方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令。</li>
</ul>
</li>
<li><p>规定了两种异常状况，如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常; 如果虚拟机扩展时无法申请到足够的内存，将抛出OutOfMemoryError异常。 </p>
</li>
</ul>
</li>
<li><p>本地方法栈</p>
<ul>
<li>作用与JVM栈类似，区别时本地方法栈为虚拟机使用到的native方法服务。</li>
<li>有的虚拟机会把本地方法栈和JVM栈合二为一。</li>
</ul>
</li>
<li><p>堆</p>
<ul>
<li>虚拟机启动时创建，用于存放对象实例和数组，是垃圾收集器管理的主要区域。</li>
<li>可以处于物理上不连续的内存空间中，只要逻辑上连续即可。</li>
<li>若在堆中没有完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</li>
</ul>
</li>
<li><p>方法区</p>
<ul>
<li>于存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等。</li>
<li>与堆一样逻辑上连续即可，还可以选择不实现垃圾收集，若要回收则主要针对常量池和对类型的卸载。</li>
<li>当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。 </li>
</ul>
</li>
<li><p>运行时常量池</p>
<ul>
<li>方法区的一部分。用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</li>
<li>Java语言并不要求常量一定只有编译期才能产生，也可能在运行时将新的常量放入池中，这种特性被开发人员利用得比较多是便是String类的intern方法。</li>
<li>当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</li>
</ul>
</li>
</ul>
<p>###2. Hotspot虚拟机对象</p>
<ul>
<li><p>对象的创建</p>
<ol>
<li>当遇到一条new指令时，检查这个指令的参数能否在常量池中定位到一个类的符号引用，并且检测这个符号引用代表的类是否已经加载、解析和初始化。如果没有则先执行相应的类加载过程。</li>
<li>然后分配内存。内存大小在类加载完成后便可确定。因此分配空间的任务等同于把一块内存从Java堆中划分出来。这里有两种策略，使用哪种分配方式由Java堆是否规整决定，而是否规整由垃圾收集器算法决定。<ul>
<li>指针碰撞：假设Java堆中的内存绝对规整，即所有用过的内存放在一边，空闲的内存在另一边，中间是一个作为分界点的指示器，那分配内存等同于把指针向空闲边挪动一段与对象大小相等的距离。</li>
<li>空闲列表：假设Java堆中的内存不规整，已使用的内存和未分配的内存相互交织，那就需要维护一个列表去记录哪些内存块可用，分配的时候找一个足够大的空间划分给对象实例，并更新列表上的记录。</li>
</ul>
</li>
<li>虚拟机需要对对象进行必要的设置，例如这个对象是哪个类的实例、如何找到类的元数据信息等。这些信息存放在对象头中。</li>
<li>执行 &lt; init &gt; 方法，把对象按照程序员的意愿进行初始化。</li>
</ol>
</li>
<li><p>对象的内存布局<br>  主要有3块区域：对象头、实例数据和对齐填充。</p>
<ul>
<li>对象头：包含两部分。一是记录对象自身的运行时数据如哈希码、GC分代年龄、锁状态标志、线程持有的锁等。另一部分是类型指针，即指向它的类元数据的指针（注意不是所有虚拟机都必须在这里保留类型指针）。</li>
<li>实例数据：存储代码中定义的各种类型的字段。</li>
<li>对齐填充：要求对象起始位置是8字节的整数倍，也就是对象大小是8字节的整数倍。当对象实例数据部分没有对齐时则需要填充补全。</li>
</ul>
</li>
<li><p>对象的访问定位<br>为了使用对象，Java程序需要通过栈上的reference数据操作堆上的具体对象。这里的访问方式主要有两种：</p>
<ul>
<li>句柄访问：Java堆划分一块内存作为句柄池，reference存储句柄地址，句柄中包含对象实例数据和类型数据的地址，如下图<br><img src="/2018/05/02/Java内存模型/access_object_handler.png" alt=""></li>
<li>直接指针访问：reference存储的直接就是对象地址，如下<br><img src="/2018/05/02/Java内存模型/access_direct.png" alt=""></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java内存区域&quot;&gt;&lt;a href=&quot;#Java内存区域&quot; class=&quot;headerlink&quot; title=&quot;Java内存区域&quot;&gt;&lt;/a&gt;Java内存区域&lt;/h1&gt;&lt;p&gt;###1. 运行时数据区&lt;br&gt;JVM虚拟机管理的内存会在执行时被划分为以下几个区域,总体的
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="内存模型" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>记阿里一面</title>
    <link href="http://yoursite.com/2018/04/22/%E8%AE%B0%E9%98%BF%E9%87%8C%E4%B8%80%E9%9D%A2/"/>
    <id>http://yoursite.com/2018/04/22/记阿里一面/</id>
    <published>2018-04-22T13:53:40.000Z</published>
    <updated>2018-04-22T14:06:35.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记阿里一面"><a href="#记阿里一面" class="headerlink" title="记阿里一面"></a>记阿里一面</h2><p> 前几天阿里来了电一面，今天记录一下问题，也方便以后面试时查阅。<br> 阿里面的是上海财富部的java开发，偏机器学习方面。</p>
<ol>
<li>java写完程序（.java）,到执行都经历了哪些。(java程序执行过程,包括java编译以及jvm执行)</li>
<li>数据库中一、二、三以及BC范式的作用。（应该针对减少冗余，防止不一致性方面作答吧）</li>
<li>linux 查看进程命令 (top,htop, ps -ef 等)</li>
<li>了解哪些大数据平台/框架 （答了spark，因此让我介绍下spark）</li>
<li>讲下logistic回归</li>
<li>讲下DL中的激活函数</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;记阿里一面&quot;&gt;&lt;a href=&quot;#记阿里一面&quot; class=&quot;headerlink&quot; title=&quot;记阿里一面&quot;&gt;&lt;/a&gt;记阿里一面&lt;/h2&gt;&lt;p&gt; 前几天阿里来了电一面，今天记录一下问题，也方便以后面试时查阅。&lt;br&gt; 阿里面的是上海财富部的java开发，偏机器
    
    </summary>
    
      <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="阿里" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C/"/>
    
  </entry>
  
  <entry>
    <title>lightgbm参数</title>
    <link href="http://yoursite.com/2017/10/14/lightgbm%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2017/10/14/lightgbm参数/</id>
    <published>2017-10-14T05:59:45.000Z</published>
    <updated>2017-10-14T06:25:04.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lightgbm-参数介绍"><a href="#lightgbm-参数介绍" class="headerlink" title="lightgbm 参数介绍"></a>lightgbm 参数介绍</h2><p>之前介绍了下xgboost的重要参数。今天把lightgbm的参数整理一下，方便以后查阅。</p>
<ol>
<li><p><strong>Core Paramater</strong><br> 这是一般会设置的核心参数</p>
<ul>
<li><strong>objective</strong>: regression, regression_l2(mse), regression_l1(mae), huber, fair, poisson, binary, lambdarank, multiclass</li>
<li><strong>boosting</strong>: gbdt, rf, dart, goss</li>
<li><strong>num_rounds</strong>: boosting的数量</li>
<li><strong>learning_rate</strong>: 学习率</li>
<li><strong>num_leaves</strong>: 单一树中的叶子数</li>
<li><strong>num_threads</strong>: 最好设置为CPU核数</li>
</ul>
</li>
<li><p><strong>Learning Control Paramater</strong><br> 这些是控制学习的一些参数，只选取了个gbdt有关的一些。其他后续补充。</p>
<ul>
<li><strong>max_depth</strong></li>
<li><strong>min_data_in_leaf</strong></li>
<li><strong>min_sum_hessian_in_leaf</strong> : 类似min_data_in_leaf</li>
<li><strong>feature_fraction</strong>：类似xgboost中的colsample_bytree</li>
<li><strong>feature_fraction_seed</strong></li>
<li><strong>bagging_fraction</strong>：随机选择一部分数据不重新采样</li>
<li><strong>bagging_freq</strong></li>
<li><strong>bagging_seed</strong></li>
<li><strong>early_stopping_round</strong></li>
<li><strong>lambda_l1</strong></li>
<li><strong>lambda_l2</strong></li>
<li><strong>min_gain_to_split</strong>：划分节点的最小提升</li>
</ul>
</li>
<li><p><strong>Metric Parameter</strong></p>
<ul>
<li><strong>metric</strong> 评估参数，主要有：l1,l2,l2_root(rmse),huber,fair,poisson,ndcg,map,auc,binary_logloss,binary_error,multi_logloss,multi_error</li>
<li><strong>metric_freq</strong>: 输出频率</li>
</ul>
</li>
</ol>
<p>还有不少参数暂时没怎么用到，以后再补充。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lightgbm-参数介绍&quot;&gt;&lt;a href=&quot;#lightgbm-参数介绍&quot; class=&quot;headerlink&quot; title=&quot;lightgbm 参数介绍&quot;&gt;&lt;/a&gt;lightgbm 参数介绍&lt;/h2&gt;&lt;p&gt;之前介绍了下xgboost的重要参数。今天把ligh
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="lightgbm" scheme="http://yoursite.com/tags/lightgbm/"/>
    
      <category term="boost" scheme="http://yoursite.com/tags/boost/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>xgboost参数</title>
    <link href="http://yoursite.com/2017/10/13/xgboost%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2017/10/13/xgboost参数/</id>
    <published>2017-10-13T12:46:10.000Z</published>
    <updated>2017-10-13T14:58:34.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xgboost-参数介绍"><a href="#xgboost-参数介绍" class="headerlink" title="xgboost 参数介绍"></a>xgboost 参数介绍</h2><p>这里记录下xgboost的一些重要参数，方便以后查阅。</p>
<h4 id="Task-参数"><a href="#Task-参数" class="headerlink" title="Task 参数"></a>Task 参数</h4><ol>
<li><strong>objective</strong><br> 定义学习目标, 默认值为 reg:linear<ul>
<li>reg:linear  —— 线性回归</li>
<li>reg:logistic —— 逻辑回归</li>
<li>binary:logistic —— 二分类逻辑回归，输出概率</li>
<li>binary:logitraw —— 二分类逻辑回归，输出w<sup>T</sup>x（logistic转换前的得分）</li>
<li>count:poisson —— 计数数据的泊松回归，输出泊松分布的均值（max_delta_step默认设置为0.7）</li>
<li>multi:softmax —— 多分类，需要设置num_class</li>
<li>multi:softprob —— 多分类，输出在各个类别下的概率</li>
<li>rank:pairwise —— 任务排序，通过最小化pairwise loss求解</li>
</ul>
</li>
<li><strong>base_score</strong><br> 所有实例、global bias的最初预测得分，默认0.5</li>
<li><strong>eval_metric</strong><br> 评估指标，不用objective有不同的默认值<ul>
<li>rmse</li>
<li>logloss</li>
<li>error 错误率</li>
<li>merror 多分类错误率</li>
<li>mlogloss</li>
<li>auc</li>
<li>ndcg  (normalized discounted cumulative gain)</li>
<li>map 平均准确率</li>
<li>ndcg@n；map@n；ndcg-；map-；ndcg@n-；map@n-</li>
</ul>
</li>
</ol>
<h4 id="booster-参数"><a href="#booster-参数" class="headerlink" title="booster 参数"></a>booster 参数</h4><ol>
<li><strong>eta</strong>：为了防止过拟合，更新过程中用到的收缩步长。在每次提升计算之后，算法会直接获得新特征的权重。 eta通过缩减特征的权重使提升计算过程更加保守。缺省值为0.3。 类似学习率</li>
<li><strong>gamma</strong> : 默认值为0，为了对树的叶子节点做进一步的分割而必须设置的损失减少的最小值。该值越大，算法越保守</li>
<li><strong>max_depth</strong>: 树的最大深度</li>
<li><strong>min_child_weight</strong>：树的叶子节点最小权重</li>
<li><strong>max_delta_step</strong>：如果该值为0，就是没有限制；如果设为一个正数，可以使每一步更新更加保守通常情况下这一参数是不需要设置的</li>
<li><strong>subsample</strong>：选取子样本的比率</li>
<li><strong>colsample_bytree</strong>： 选取的特征的比率</li>
<li><strong>lambda</strong>：l2正则</li>
<li><strong>alpha</strong>：l1正则</li>
</ol>
<h4 id="一般参数"><a href="#一般参数" class="headerlink" title="一般参数"></a>一般参数</h4><ol>
<li><strong>booster</strong>: gbtree和gblinear。gbtree使用基于树的模型进行提升计算，gblinear使用线性模型进行提升计算。缺省值为gbtree。还有一个dart。</li>
<li><strong>silent</strong>: 取0时表示打印出运行时信息，取1时表示以缄默方式运行，不打印运行时信息。缺省值为0。</li>
<li><strong>nthread</strong>: 运行时的线程数。缺省值是当前系统可以获得的最大线程数。</li>
</ol>
<p>一般会设置 objective,eval_metric,eta,max_depth,subsample,colsample_bytree<br>防止过拟合还会设置 gamma,min_child_weight,lambda,alpha<br>silent一般设置为1</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;xgboost-参数介绍&quot;&gt;&lt;a href=&quot;#xgboost-参数介绍&quot; class=&quot;headerlink&quot; title=&quot;xgboost 参数介绍&quot;&gt;&lt;/a&gt;xgboost 参数介绍&lt;/h2&gt;&lt;p&gt;这里记录下xgboost的一些重要参数，方便以后查阅。&lt;/p
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="boost" scheme="http://yoursite.com/tags/boost/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="xgboost" scheme="http://yoursite.com/tags/xgboost/"/>
    
  </entry>
  
  <entry>
    <title>.ssh文件权限</title>
    <link href="http://yoursite.com/2017/09/18/ssh%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2017/09/18/ssh文件权限/</id>
    <published>2017-09-18T04:15:36.000Z</published>
    <updated>2017-09-18T04:21:13.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在ssh中无密码登录的文件权限问题"><a href="#在ssh中无密码登录的文件权限问题" class="headerlink" title="在ssh中无密码登录的文件权限问题"></a>在ssh中无密码登录的文件权限问题</h2><p>.ssh文件夹的权限为700<br>.ssh中authorized_keys文件的权限为600</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在ssh中无密码登录的文件权限问题&quot;&gt;&lt;a href=&quot;#在ssh中无密码登录的文件权限问题&quot; class=&quot;headerlink&quot; title=&quot;在ssh中无密码登录的文件权限问题&quot;&gt;&lt;/a&gt;在ssh中无密码登录的文件权限问题&lt;/h2&gt;&lt;p&gt;.ssh文件夹的权限
    
    </summary>
    
      <category term="ssh" scheme="http://yoursite.com/categories/ssh/"/>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
      <category term="文件权限" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>python中的抽象方法，抽象类，私有，保护方法</title>
    <link href="http://yoursite.com/2017/04/06/python%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%8C%E7%A7%81%E6%9C%89%EF%BC%8C%E4%BF%9D%E6%8A%A4%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/06/python中的抽象方法，抽象类，私有，保护方法/</id>
    <published>2017-04-06T07:50:32.000Z</published>
    <updated>2017-04-06T08:03:50.004Z</updated>
    
    <content type="html"><![CDATA[<p>平时在python基本不怎么写类，都是定义方法到处调用。但是感觉把公共逻辑封装成抽象类，再继承写独立的逻辑更快更清晰。<br>由于python 没有抽象类、接口的概念，所以要实现这种功能得abc.py 这个类库,具体方式如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">abstract1</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = ABCMeta</div><div class="line"></div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print1</span><span class="params">(self)</span>:</span><span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print2</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Test1 print2"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__si</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"abstract1 si"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gong</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"abstarct gong"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pro</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"abstract pro"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">imp1</span><span class="params">(abstract1)</span>:</span></div><div class="line">    __metaclass__ = ABCMeta</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print1</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"imp1 pring1"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">imp_si</span><span class="params">(self)</span>:</span></div><div class="line">        abstract1.gong()</div><div class="line">        abstract1._pro()</div></pre></td></tr></table></figure></p>
<p><code>_metaclass__ = ABCMeta</code>可以保证在实例化一个抽象类的时候抛出异常。</p>
<p><code>@abstractmethod</code>放在要定义的抽象方法上。</p>
<p>私有方法用2个下划线定义，如<code>__private_functon()</code>，子类无法调用。</p>
<p>保护方法用1个下划线定义，如<code>_protected_function()</code>，子类可以调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时在python基本不怎么写类，都是定义方法到处调用。但是感觉把公共逻辑封装成抽象类，再继承写独立的逻辑更快更清晰。&lt;br&gt;由于python 没有抽象类、接口的概念，所以要实现这种功能得abc.py 这个类库,具体方式如下：&lt;br&gt;&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="抽象" scheme="http://yoursite.com/tags/%E6%8A%BD%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>整型操作中判断是否超出边界</title>
    <link href="http://yoursite.com/2017/04/05/%E6%95%B4%E5%BD%A2%E6%93%8D%E4%BD%9C%E4%B8%AD%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E8%B6%85%E5%87%BA%E8%BE%B9%E7%95%8C/"/>
    <id>http://yoursite.com/2017/04/05/整形操作中判断是否超出边界/</id>
    <published>2017-04-05T06:00:08.000Z</published>
    <updated>2017-04-05T06:14:21.369Z</updated>
    
    <content type="html"><![CDATA[<p>今天leetcode刷题时候遇到了对整型数据的操作，想要对超出最大最小值进行特殊处理。一开始的思路是在对整型数据操作时候存成long型，这样就可以很简单地在末尾进行判断了，但是想到如果是对long做操作难道再把数据类型扩大成biginteger么？<br>因此另一种办法就是在每次操作前进行判断，由于在操作后，其值可能已经超界发生改变就很难判断，所以在操作前用最大或者最小值的整除和取余的值和其判断即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//是否会超出最大值</span></div><div class="line"><span class="keyword">if</span> (sum &gt; Integer.MAX_VALUE / <span class="number">10</span>|| (sum == Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; digit &gt; Integer.MAX_VALUE % <span class="number">10</span>))</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//是否会超出最小值</span></div><div class="line"><span class="keyword">if</span>(sum &lt; Integer.MIN_VALUE / <span class="number">10</span>||(sum == Integer.MIN_VALUE/<span class="number">10</span> &amp;&amp; digit &lt; Integer.MIN_VALUE % <span class="number">10</span>))</div></pre></td></tr></table></figure>
<hr>
<p>leetcode第8题是自己编写一个c的atoi，将一个字符串转成数字，遇到字母即停止读入。超出边界按边界返回，其实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        str = str.trim();</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> findSign = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">int</span> sign = <span class="number">1</span>;<span class="comment">//符号位</span></div><div class="line">        <span class="keyword">boolean</span> findInteger = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</div><div class="line">            <span class="keyword">char</span> a = str.charAt(i);</div><div class="line">            <span class="keyword">if</span> (a &gt;= <span class="string">'0'</span> &amp;&amp; a &lt;= <span class="string">'9'</span>) &#123;</div><div class="line">                <span class="keyword">int</span> digit = sign * (a - <span class="string">'0'</span>);</div><div class="line">                <span class="comment">//判断是否会超出int最大值范围</span></div><div class="line">                <span class="keyword">if</span> (sum &gt; Integer.MAX_VALUE / <span class="number">10</span></div><div class="line">                        || (sum == Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; digit &gt; Integer.MAX_VALUE % <span class="number">10</span>))&#123;</div><div class="line">                    <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; Integer.MIN_VALUE / <span class="number">10</span></div><div class="line">                        || (sum == Integer.MIN_VALUE/<span class="number">10</span> &amp;&amp; digit &lt; Integer.MIN_VALUE % <span class="number">10</span>) )&#123;</div><div class="line">                    <span class="keyword">return</span> Integer.MIN_VALUE;</div><div class="line">                &#125;</div><div class="line">                sum = sum * <span class="number">10</span> + digit;</div><div class="line">                findInteger = <span class="keyword">true</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="string">'-'</span> &amp;&amp; !findSign &amp;&amp; !findInteger)&#123;</div><div class="line">                findSign = <span class="keyword">true</span>;</div><div class="line">                sign = -<span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="string">'+'</span> &amp;&amp; !findSign &amp;&amp; !findInteger)&#123;</div><div class="line">                findSign = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天leetcode刷题时候遇到了对整型数据的操作，想要对超出最大最小值进行特殊处理。一开始的思路是在对整型数据操作时候存成long型，这样就可以很简单地在末尾进行判断了，但是想到如果是对long做操作难道再把数据类型扩大成biginteger么？&lt;br&gt;因此另一种办法就是
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="整型操作" scheme="http://yoursite.com/tags/%E6%95%B4%E5%9E%8B%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>remarkable安装</title>
    <link href="http://yoursite.com/2017/03/24/remarkable%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2017/03/24/remarkable安装/</id>
    <published>2017-03-24T07:09:04.000Z</published>
    <updated>2017-03-24T11:03:18.634Z</updated>
    
    <content type="html"><![CDATA[<p>今天在用typora的时候发现它在修改文档的时候有些不方便，而且现在我的显示屏也很大，完全可以用双栏的markdown编辑器。因此就决定用remarkable。</p>
<hr>
<p><strong>首先</strong>在<a href="https://remarkableapp.github.io/linux/download.html" title="remarkable下载站" target="_blank" rel="external">remarkable下载页(linux)</a>下载。 这里有deb，prm，github源码等形式。我下的是deb，因为有好多依赖问题，这种东西还是让软件帮我们解决吧。</p>
<p><strong>然后</strong>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i remarkable_1.87_all.deb</div></pre></td></tr></table></figure></p>
<p>发现各种依赖不让装。然后尝试先把其中一个依赖装起来，发现它们似乎相互依赖的样子。怎么样都不行。最后其实只要这些依赖一起安装就可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -f</div></pre></td></tr></table></figure>
<p>依赖安装好了就可以安装remarkable了。</p>
<p><strong>最后</strong>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">remarkable &amp;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在用typora的时候发现它在修改文档的时候有些不方便，而且现在我的显示屏也很大，完全可以用双栏的markdown编辑器。因此就决定用remarkable。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;首先&lt;/strong&gt;在&lt;a href=&quot;https://remarka
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
    
      <category term="remarkable" scheme="http://yoursite.com/tags/remarkable/"/>
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="安装" scheme="http://yoursite.com/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://yoursite.com/2017/03/24/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2017/03/24/markdown语法/</id>
    <published>2017-03-24T05:12:31.000Z</published>
    <updated>2017-03-24T10:14:28.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div></pre></td></tr></table></figure>
<p>标题总共由6级，用1个#到6个#表示，#号后面需要跟一个空格。这里不作示例了。</p>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* 1</div><div class="line">* 2</div><div class="line">* 3</div></pre></td></tr></table></figure>
<p>用*表示无序列表，后面需要加一个空格</p>
<ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 1</div><div class="line">2. 2</div><div class="line">3. 3</div></pre></td></tr></table></figure>
<p>用数字加点的形式表示有序列表，注意空格。</p>
<ol>
<li>1</li>
<li>2</li>
<li>3</li>
</ol>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; 这里是引用内容</div></pre></td></tr></table></figure>
<blockquote>
<p>这里是引用内容</p>
<hr>
</blockquote>
<h2 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[百度](www.baidu.com &quot;百度&quot;)</div></pre></td></tr></table></figure>
<p><a href="www.baidu.com" title="百度">百度</a></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![](http://mouapp.com/Mou_128.png)</div><div class="line">![](markdown语法/oschina.png)</div></pre></td></tr></table></figure>
<p>图片相比链接多了一个感叹号<br><img src="http://mouapp.com/Mou_128.png" alt=""><br><img src="/2017/03/24/markdown语法/oschina.png" alt=""></p>
<p><strong>注意:</strong>这里我用的是hexo，需要另下插件才能把本地的图片显示出来。具体参考<a href="http://www.tuicool.com/articles/umEBVfI" target="_blank" rel="external">http://www.tuicool.com/articles/umEBVfI</a>. 此外根目录下_config.yml中的post_asset_folder设置为true </p>
<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码放入由`组成的6个点中，上下各3个</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_ch</span><span class="params">()</span>:</span></div><div class="line">    mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'simhei'</span>] </div><div class="line">    mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib中文显示</title>
    <link href="http://yoursite.com/2017/03/24/matplotlib%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/"/>
    <id>http://yoursite.com/2017/03/24/matplotlib中文显示/</id>
    <published>2017-03-24T05:08:51.000Z</published>
    <updated>2017-03-24T11:49:25.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matplotlib中文显示"><a href="#matplotlib中文显示" class="headerlink" title="matplotlib中文显示"></a>matplotlib中文显示</h1><p>今天在ubuntu下用matplotlib显示中文的时候出现了乱码，之前在windows上用了下面这段代码就可以了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_ch</span><span class="params">()</span>:</span></div><div class="line">    mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'simhei'</span>] <span class="comment"># 指定默认字体</span></div><div class="line">    mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span> <span class="comment"># 解决保存图像是负号'-'显示为方块的问题</span></div></pre></td></tr></table></figure></p>
<p>但是在ubuntu上还是显示不出。主要原因是ubuntu上没有这个字体。所以从windows上把黑体字体搬到ubuntu的下面这个路径下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/lib/python2.7/dist-packages/matplotlib/mpl-data/fonts</div></pre></td></tr></table></figure></p>
<p>可能每台机子具体路径不太一样，需要自己找下。我是通过<code>print matplotlib.__file__</code>找到的。</p>
<p>然后删除~/.cache/matplotlib的缓冲目录就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;matplotlib中文显示&quot;&gt;&lt;a href=&quot;#matplotlib中文显示&quot; class=&quot;headerlink&quot; title=&quot;matplotlib中文显示&quot;&gt;&lt;/a&gt;matplotlib中文显示&lt;/h1&gt;&lt;p&gt;今天在ubuntu下用matplotlib显
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
      <category term="中文显示" scheme="http://yoursite.com/tags/%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/"/>
    
  </entry>
  
</feed>
