[{"title":"python中的抽象方法，抽象类，私有，保护方法","date":"2017-04-06T07:50:32.000Z","path":"2017/04/06/python中的抽象方法，抽象类，私有，保护方法/","text":"平时在python基本不怎么写类，都是定义方法到处调用。但是感觉把公共逻辑封装成抽象类，再继承写独立的逻辑更快更清晰。由于python 没有抽象类、接口的概念，所以要实现这种功能得abc.py 这个类库,具体方式如下：1234567891011121314151617181920212223242526272829from abc import ABCMeta, abstractmethodclass abstract1(object): __metaclass__ = ABCMeta @abstractmethod def print1(self):pass def print2(self): print \"Test1 print2\" def __si(self): print \"abstract1 si\" def gong(self): print \"abstarct gong\" def _pro(self): print \"abstract pro\"class imp1(abstract1): __metaclass__ = ABCMeta def print1(self): print \"imp1 pring1\" def imp_si(self): abstract1.gong() abstract1._pro() _metaclass__ = ABCMeta可以保证在实例化一个抽象类的时候抛出异常。 @abstractmethod放在要定义的抽象方法上。 私有方法用2个下划线定义，如__private_functon()，子类无法调用。 保护方法用1个下划线定义，如_protected_function()，子类可以调用。","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"抽象","slug":"抽象","permalink":"http://yoursite.com/tags/抽象/"}]},{"title":"整型操作中判断是否超出边界","date":"2017-04-05T06:00:08.000Z","path":"2017/04/05/整形操作中判断是否超出边界/","text":"今天leetcode刷题时候遇到了对整型数据的操作，想要对超出最大最小值进行特殊处理。一开始的思路是在对整型数据操作时候存成long型，这样就可以很简单地在末尾进行判断了，但是想到如果是对long做操作难道再把数据类型扩大成biginteger么？因此另一种办法就是在每次操作前进行判断，由于在操作后，其值可能已经超界发生改变就很难判断，所以在操作前用最大或者最小值的整除和取余的值和其判断即可。12//是否会超出最大值if (sum &gt; Integer.MAX_VALUE / 10|| (sum == Integer.MAX_VALUE/10 &amp;&amp; digit &gt; Integer.MAX_VALUE % 10)) 12//是否会超出最小值if(sum &lt; Integer.MIN_VALUE / 10||(sum == Integer.MIN_VALUE/10 &amp;&amp; digit &lt; Integer.MIN_VALUE % 10)) leetcode第8题是自己编写一个c的atoi，将一个字符串转成数字，遇到字母即停止读入。超出边界按边界返回，其实现如下：123456789101112131415161718192021222324252627282930313233public int myAtoi(String str) &#123; if (str == null) return 0; str = str.trim(); int sum = 0; boolean findSign = false; int sign = 1;//符号位 boolean findInteger = false; for (int i = 0; i &lt; str.length(); i++) &#123; char a = str.charAt(i); if (a &gt;= '0' &amp;&amp; a &lt;= '9') &#123; int digit = sign * (a - '0'); //判断是否会超出int最大值范围 if (sum &gt; Integer.MAX_VALUE / 10 || (sum == Integer.MAX_VALUE/10 &amp;&amp; digit &gt; Integer.MAX_VALUE % 10))&#123; return Integer.MAX_VALUE; &#125;else if(sum &lt; Integer.MIN_VALUE / 10 || (sum == Integer.MIN_VALUE/10 &amp;&amp; digit &lt; Integer.MIN_VALUE % 10) )&#123; return Integer.MIN_VALUE; &#125; sum = sum * 10 + digit; findInteger = true; &#125;else if(a == '-' &amp;&amp; !findSign &amp;&amp; !findInteger)&#123; findSign = true; sign = -1; &#125;else if(a == '+' &amp;&amp; !findSign &amp;&amp; !findInteger)&#123; findSign = true; &#125; else &#123; break; &#125; &#125; return sum; &#125;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://yoursite.com/tags/leetcode/"},{"name":"整型操作","slug":"整型操作","permalink":"http://yoursite.com/tags/整型操作/"}]},{"title":"remarkable安装","date":"2017-03-24T07:09:04.000Z","path":"2017/03/24/remarkable安装/","text":"今天在用typora的时候发现它在修改文档的时候有些不方便，而且现在我的显示屏也很大，完全可以用双栏的markdown编辑器。因此就决定用remarkable。 首先在remarkable下载页(linux)下载。 这里有deb，prm，github源码等形式。我下的是deb，因为有好多依赖问题，这种东西还是让软件帮我们解决吧。 然后安装1sudo dpkg -i remarkable_1.87_all.deb 发现各种依赖不让装。然后尝试先把其中一个依赖装起来，发现它们似乎相互依赖的样子。怎么样都不行。最后其实只要这些依赖一起安装就可以了。 1sudo apt-get install -f 依赖安装好了就可以安装remarkable了。 最后使用1remarkable &amp;","tags":[{"name":"remarkable","slug":"remarkable","permalink":"http://yoursite.com/tags/remarkable/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://yoursite.com/tags/ubuntu/"},{"name":"安装","slug":"安装","permalink":"http://yoursite.com/tags/安装/"}]},{"title":"markdown语法","date":"2017-03-24T05:12:31.000Z","path":"2017/03/24/markdown语法/","text":"标题12# 一级标题## 二级标题 标题总共由6级，用1个#到6个#表示，#号后面需要跟一个空格。这里不作示例了。 列表无序列表123* 1* 2* 3 用*表示无序列表，后面需要加一个空格 1 2 3 有序列表1231. 12. 23. 3 用数字加点的形式表示有序列表，注意空格。 1 2 3 引用1&gt; 这里是引用内容 这里是引用内容 链接和图片链接1[百度](www.baidu.com &quot;百度&quot;) 百度 图片12![](http://mouapp.com/Mou_128.png)![](markdown语法/oschina.png) 图片相比链接多了一个感叹号 注意:这里我用的是hexo，需要另下插件才能把本地的图片显示出来。具体参考http://www.tuicool.com/articles/umEBVfI. 此外根目录下_config.yml中的post_asset_folder设置为true 代码块代码放入由`组成的6个点中，上下各3个 123def set_ch(): mpl.rcParams['font.sans-serif'] = ['simhei'] mpl.rcParams['axes.unicode_minus'] = False","tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/语法/"}]},{"title":"matplotlib中文显示","date":"2017-03-24T05:08:51.000Z","path":"2017/03/24/matplotlib中文显示/","text":"matplotlib中文显示今天在ubuntu下用matplotlib显示中文的时候出现了乱码，之前在windows上用了下面这段代码就可以了。123def set_ch(): mpl.rcParams['font.sans-serif'] = ['simhei'] # 指定默认字体 mpl.rcParams['axes.unicode_minus'] = False # 解决保存图像是负号'-'显示为方块的问题 但是在ubuntu上还是显示不出。主要原因是ubuntu上没有这个字体。所以从windows上把黑体字体搬到ubuntu的下面这个路径下。1/usr/local/lib/python2.7/dist-packages/matplotlib/mpl-data/fonts 可能每台机子具体路径不太一样，需要自己找下。我是通过print matplotlib.__file__找到的。 然后删除~/.cache/matplotlib的缓冲目录就可以了。","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"matplotlib","slug":"matplotlib","permalink":"http://yoursite.com/tags/matplotlib/"},{"name":"中文显示","slug":"中文显示","permalink":"http://yoursite.com/tags/中文显示/"}]}]